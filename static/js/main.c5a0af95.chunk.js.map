{"version":3,"sources":["logo.svg","img/download.svg","serviceWorker.js","Components/Login/Ken_login.jsx","Components/Header.js","Components/Hompages/Landing.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","pink","makeStyles","styled","div","Landing","className","src","Download","alt","href","Button","variant","color","size","style","height","borderRadius","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,4KCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wBCNuCC,E,uCCL3BC,aAAW,e,+ICDfC,EAAOC,IAAV,KAwCIC,MAnCf,WACE,OACE,yBAAKC,UAAU,OACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,QAAO,yBAAKC,IAAKC,IAAUC,IAAI,WAE9C,yBAAKH,UAAU,QACX,uBAAGI,KAAK,KAAR,cACA,uBAAGA,KAAK,KAAR,cACA,uBAAGA,KAAK,KAAR,aAEJ,yBAAKJ,UAAU,YACX,uBAAGI,KAAK,KAAR,SACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,WAAlC,qBAGR,yBAAKP,UAAU,YACb,yBAAKA,UAAU,kBACb,2DAAgC,6BAAhC,uBACA,qMAGF,yBAAKA,UAAU,cAAf,IAA6B,kBAACK,EAAA,EAAD,CAAQC,QAAQ,YAAYE,KAAK,QAAQC,MAAO,CAACC,OAAQ,GAAIC,aAAc,GAAIJ,MAAM,WAArF,oBAA7B,KAEE,yBAAKP,UAAU,aACb,+BACA,+BACA,mCC3BdY,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SJmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c5a0af95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/download.17663dde.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { CropFree } from '@material-ui/icons';\r\nimport React from 'react';\r\nimport '../../App.css';\r\nimport '../../Css/Ken_login.css';\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\r\nimport AcUnitIcon from '@material-ui/icons/AcUnit';\r\nimport { Grid, Paper} from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { pink } from '@material-ui/core/colors';\r\n\r\nconst CustStyles = {\r\n    Paper: {paddingTop: 70, backgroundColor: pink}\r\n}\r\n\r\nconst Ken_login = ()=>{\r\n    return(\r\n    <div>\r\n        <Grid container md={12} style={CustStyles.Paper}>\r\n            <Grid item sm={6} >\r\n                <Paper style={CustStyles.Paper}>\r\n                    paper 1\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item sm={6}>\r\n                <Paper style={CustStyles.Paper}>Paper 2</Paper>\r\n            </Grid>\r\n        </Grid>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Ken_login;\r\n","import { CropFree } from '@material-ui/icons';\r\nimport React from 'react';\r\nimport '../App.css';\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\r\nimport AcUnitIcon from '@material-ui/icons/AcUnit';\r\nimport { makeStyles } from '@material-ui/styles'\r\n\r\nconst useStyles = makeStyles(()=>{\r\n    \r\n})\r\n\r\nconst Header = ()=>{\r\n    return(\r\n        <AppBar position=\"static\">\r\n        <Toolbar>\r\n         <Typography>\r\n             This a typo in a Toolbar\r\n         </Typography>\r\n         <AcUnitIcon />\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport '../../App.css';\r\nimport Download from '../../img/download.svg';\r\nimport Button from '@material-ui/core/Button';\r\nimport styled from 'styled-components';\r\n\r\nconst myDiv = styled.div`\r\n  font-size:30px;\r\n  color: red;\r\n`\r\n\r\nfunction Landing() {\r\n  return (\r\n    <div className=\"App\">\r\n        <div className=\"header\">\r\n            <div className=\"logo\"><img src={Download} alt=\"check\"/></div>\r\n          \r\n            <div className=\"menu\">\r\n                <a href=\"#\">Who we are</a>\r\n                <a href=\"#\">What we do</a>\r\n                <a href=\"#\">Benefits</a>\r\n            </div>\r\n            <div className=\"menu-btn\">\r\n                <a href=\"#\">Login</a>\r\n                <Button variant=\"contained\" color=\"primary\">Become a member</Button>\r\n            </div>\r\n        </div>\r\n        <div className=\"section1\">\r\n          <div className=\"call-to-action\">\r\n            <h1>Africa Digital Epidemiology <br/>Innovation Network.</h1>\r\n            <p>A community that provides an opportunity for members to lend their expertise and resources, to collaborate and conduct research for various projects in epidemiology.</p>\r\n            \r\n          </div>\r\n          <div className=\"buttonCont\"> <Button variant=\"contained\" size=\"large\" style={{height: 70, borderRadius: 5}} color=\"primary\">Become a member </Button> </div>\r\n              {/* The three circular dots */}\r\n            <div className=\"appleDots\">\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n            </div>\r\n        </div>\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Ken_login from './Components/Login/Ken_login';\r\nimport Header from './Components/Header';\r\nimport Landing from './Components/Hompages/Landing';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Landing />   \r\n \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}